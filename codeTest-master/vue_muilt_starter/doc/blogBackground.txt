一共有四大块：都在本文件中
1、页面定制CSS代码
2、博客侧边栏公告（支持HTML代码）（支持JS代码）
3、页首Html代码
4、页脚Html代码

……………………………………………………………………………………………………………………………………………………………………………………………………
1、页面定制css

#navigator{
    background-color: #444
}
.loader {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  font-size: 12px;
}
.loader::after {
  content: '';
  position: absolute;
  top: calc(50% - .15em);
  left: -5vw;
  height: .3em;
  width: calc(100% + 10vw);
  border-radius: 50%;
  background-color: currentColor;
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
  -webkit-filter: blur(0.05em) contrast(2);
          filter: blur(0.05em) contrast(2);
  box-shadow: 0 0 1em #ccf, 0 0 2em #ccf;
}

.o {
  position: relative;
  left: -42px;
  z-index: 1;
  width: 1em;
  height: 1em;
  border-radius: 50%;
  background-color: currentColor;
  margin-left: 3em;
  margin-right: 3em;
  -webkit-animation: translateX 1s linear infinite;
          animation: translateX 1s linear infinite;
  -webkit-filter: blur(0.3em) contrast(5);
          filter: blur(0.3em) contrast(5);
  box-shadow: 0 0 0.15em, 0 0 1em 0.25em #9999ff, 0 0 3em 1.5em rgba(153, 153, 255, 0.2), 0 0 5em rgba(153, 153, 255, 0.5);
}
.o:first-child {
  -webkit-animation-name: translateX, hide-show;
          animation-name: translateX, hide-show;
  -webkit-animation-timing-function: linear, step-end;
          animation-timing-function: linear, step-end;
}
.o:last-child {
  -webkit-transform-origin: -99px 50%;
          transform-origin: -99px 50%;
  -webkit-animation-name: helf-rotate;
          animation-name: helf-rotate;
  -webkit-animation-timing-function: cubic-bezier(0.25, 0, 0.4, 1.25);
          animation-timing-function: cubic-bezier(0.25, 0, 0.4, 1.25);
}
@-webkit-keyframes translateX {
  100% {
    -webkit-transform: translateX(84px);
            transform: translateX(84px);
  }
}
@keyframes translateX {
  100% {
    -webkit-transform: translateX(84px);
            transform: translateX(84px);
  }
}
@-webkit-keyframes helf-rotate {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  50% {
    opacity: 1;
    -webkit-transform: rotate(180deg);
            transform: rotate(180deg);
  }
  50.1%,
    100% {
    opacity: 0;
  }
}
@keyframes helf-rotate {
  0% {
    -webkit-transform: rotate(0deg);
            transform: rotate(0deg);
  }
  50% {
    opacity: 1;
    -webkit-transform: rotate(180deg);
            transform: rotate(180deg);
  }
  50.1%,
    100% {
    opacity: 0;
  }
}
@-webkit-keyframes hide-show {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}
@keyframes hide-show {
  0% {
    opacity: 0;
  }
  50% {
    opacity: 1;
  }
}
.box {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  overflow: hidden;
}
.box:hover * {
  -webkit-animation-play-state: paused;
          animation-play-state: paused;
}
.box:active * {
  -webkit-animation-play-state: running;
          animation-play-state: running;
}

*,
*::before,
*::after {
  box-sizing: border-box;
}


body {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  min-height: 100%;
  margin: 0;
  line-height: 1.4;
  color: #000;
  background-color: #000;
}

.intro {
  width: 90%;
  max-width: 50rem;
  padding-top: .5em;
  padding-bottom: 1rem;
  margin: 0 auto 1em;
  font-size: calc(1rem + 2vmin);
  text-transform: capitalize;
  text-align: center;
  font-family: serif;
}
.intro small {
  display: block;
  text-align: right;
  opacity: .5;
  font-style: italic;
  text-transform: none;
  border-top: 1px dashed rgba(255, 255, 255, 0.75);
}

.info {
  margin: 0;
  padding: 1em;
  font-size: .9em;
  font-style: italic;
  font-family: serif;
  text-align: right;
  opacity: .75;
}
.info a {
  color: inherit;
}

html,
body {
  width: 100%;
  background: #000;
}
#home{

	position: relative;
}

.container{
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 300px;
    margin: 0;
    padding: 0;
    background-color: #000000;
}

………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………

2、博客侧边栏公告（支持HTML代码）（支持JS代码）

<script>
"use strict";

function createBackground(depth) {
  return new Promise(function (resolve, reject) {
    var canvas = document.createElement("canvas");
    canvas.width = 256;
    canvas.height = 256;
    var context = canvas.getContext("2d");
    context.clearRect(0, 0, canvas.width, canvas.height);
    for (var i = 0; i < 100; i++) {
      var x = Math.random() * canvas.width;
      var y = Math.random() * canvas.height;
      context.fillStyle = "rgb(" + depth + "," + depth + "," + depth + ")";
      context.fillRect(x, y, 1, 1);
    }
    canvas.toBlob(function (blob) {
      return resolve(URL.createObjectURL(blob));
    }, "image/png");
  });
}

var bgs = [];

var sx = 0,
    sy = 0;

function frame() {
  sx += 2;
  sy += 2;

  document.body.style.backgroundPositionX = bgs.map(function (bg, index, list) {
    return sx * (index + 1) * (1 / list.length) + "px";
  }).join(",");
  document.body.style.backgroundPositionY = bgs.map(function (bg, index, list) {
    return sy * (index + 1) * (1 / list.length) + "px";
  }).join(",");

  requestAnimationFrame(frame);
}

Promise.all([createBackground(128), createBackground(192), createBackground(256)]).then(function (_ref) {
  var bg0 = _ref[0];
  var bg1 = _ref[1];
  var bg2 = _ref[2];

  requestAnimationFrame(frame);
  bgs.push([bg0], [bg1], [bg2]);
  document.body.style.backgroundImage = bgs.map(function (_ref2) {
    var url = _ref2[0];
    return "url(" + url + ")";
  }).join(",");
  console.log(bg0, bg1, bg2);
});
</script>

<script>
var RENDERER = {
	PARTICLE_COUNT : 1500,
	PARTICLE_RADIUS : 1,
	MAX_ROTATION_ANGLE : Math.PI / 60,
	TRANSLATION_COUNT : 500,

	init : function(strategy){
		this.setParameters(strategy);
		this.createParticles();
		this.setupFigure();
		this.reconstructMethod();
		this.bindEvent();
		this.drawFigure();
	},
	setParameters : function(strategy){
		this.$window = $(window);

		this.$container = $('#jsi-particle-container');
		this.width = this.$container.width();
		this.height = this.$container.height();

		this.$canvas = $('<canvas />').attr({width : this.width, height : this.height}).appendTo(this.$container);
		this.context = this.$canvas.get(0).getContext('2d');

		this.center = {x : this.width / 2, y : this.height / 2};

		this.rotationX = this.MAX_ROTATION_ANGLE;
		this.rotationY = this.MAX_ROTATION_ANGLE;
		this.strategyIndex = 0;
		this.translationCount = 0;
		this.theta = 0;

		this.strategies = strategy.getStrategies();
		this.particles = [];
	},
	createParticles : function(){
		for(var i = 0; i < this.PARTICLE_COUNT; i ++){
			this.particles.push(new PARTICLE(this.center));
		}
	},
	reconstructMethod : function(){
		this.setupFigure = this.setupFigure.bind(this);
		this.drawFigure = this.drawFigure.bind(this);
		this.changeAngle = this.changeAngle.bind(this);
	},
	bindEvent : function(){
		this.$container.on('click', this.setupFigure);
		this.$container.on('mousemove', this.changeAngle);
	},
	changeAngle : function(event){
		var offset = this.$container.offset(),
			x = event.clientX - offset.left + this.$window.scrollLeft(),
			y = event.clientY - offset.top + this.$window.scrollTop();

		this.rotationX = (this.center.y - y) / this.center.y * this.MAX_ROTATION_ANGLE;
		this.rotationY = (this.center.x - x) / this.center.x * this.MAX_ROTATION_ANGLE;
	},
	setupFigure : function(){
		for(var i = 0, length = this.particles.length; i < length; i++){
			this.particles[i].setAxis(this.strategies[this.strategyIndex]());
		}
		if(++this.strategyIndex == this.strategies.length){
			this.strategyIndex = 0;
		}
		this.translationCount = 0;
	},
	drawFigure : function(){
		requestAnimationFrame(this.drawFigure);

		this.context.fillStyle = 'rgba(0, 0, 0, 0.2)';
		this.context.fillRect(0, 0, this.width, this.height);

		for(var i = 0, length = this.particles.length; i < length; i++){
			var axis = this.particles[i].getAxis2D(this.theta);

			this.context.beginPath();
			this.context.fillStyle = axis.color;
			this.context.arc(axis.x, axis.y, this.PARTICLE_RADIUS, 0, Math.PI * 2, false);
			this.context.fill();
		}
		this.theta++;
		this.theta %= 360;

		for(var i = 0, length = this.particles.length; i < length; i++){
			this.particles[i].rotateX(this.rotationX);
			this.particles[i].rotateY(this.rotationY);
		}
		this.translationCount++;
		this.translationCount %= this.TRANSLATION_COUNT;

		if(this.translationCount == 0){
			this.setupFigure();
		}
	}
};
var STRATEGY = {
	SCATTER_RADIUS :150,
	CONE_ASPECT_RATIO : 1.5,
	RING_COUNT : 5,

	getStrategies : function(){
		var strategies = [];

		for(var i in this){
			if(this[i] == arguments.callee || typeof this[i] != 'function'){
				continue;
			}
			strategies.push(this[i].bind(this));
		}
		return strategies;
	},
	createSphere : function(){
		var cosTheta = Math.random() * 2 - 1,
			sinTheta = Math.sqrt(1 - cosTheta * cosTheta),
			phi = Math.random() * 2 * Math.PI;

		return {
			x : this.SCATTER_RADIUS * sinTheta * Math.cos(phi),
			y : this.SCATTER_RADIUS * sinTheta * Math.sin(phi),
			z : this.SCATTER_RADIUS * cosTheta,
			hue : Math.round(phi / Math.PI * 30)
		};
	},
	createTorus : function(){
		var theta = Math.random() * Math.PI * 2,
			x = this.SCATTER_RADIUS + this.SCATTER_RADIUS / 6 * Math.cos(theta),
			y = this.SCATTER_RADIUS / 6 * Math.sin(theta),
			phi = Math.random() * Math.PI * 2;

		return {
			x : x * Math.cos(phi),
			y : y,
			z : x * Math.sin(phi),
			hue : Math.round(phi / Math.PI * 30)
		};
	},
	createCone : function(){
		var status = Math.random() > 1 / 3,
			x,
			y,
			phi = Math.random() * Math.PI * 2,
			rate = Math.tan(30 / 180 * Math.PI) / this.CONE_ASPECT_RATIO;

		if(status){
			y = this.SCATTER_RADIUS * (1 - Math.random() * 2);
			x = (this.SCATTER_RADIUS - y) * rate;
		}else{
			y = -this.SCATTER_RADIUS;
			x = this.SCATTER_RADIUS * 2 * rate * Math.random();
		}
		return {
			x : x * Math.cos(phi),
			y : y,
			z : x * Math.sin(phi),
			hue : Math.round(phi / Math.PI * 30)
		};
	},
	createVase : function(){
		var theta = Math.random() * Math.PI,
			x = Math.abs(this.SCATTER_RADIUS * Math.cos(theta) / 2) + this.SCATTER_RADIUS / 8,
			y = this.SCATTER_RADIUS * Math.cos(theta) * 1.2,
			phi = Math.random() * Math.PI * 2;

		return {
			x : x * Math.cos(phi),
			y : y,
			z : x * Math.sin(phi),
			hue : Math.round(phi / Math.PI * 30)
		};
	}
};
var PARTICLE = function(center){
	this.center = center;
	this.init();
};
PARTICLE.prototype = {
	SPRING : 0.01,
	FRICTION : 0.9,
	FOCUS_POSITION : 300,
	COLOR : 'hsl(%hue, 100%, 70%)',

	init : function(){
		this.x = 0;
		this.y = 0;
		this.z = 0;
		this.vx = 0;
		this.vy = 0;
		this.vz = 0;
		this.color;
	},
	setAxis : function(axis){
		this.translating = true;
		this.nextX = axis.x;
		this.nextY = axis.y;
		this.nextZ = axis.z;
		this.hue = axis.hue;
	},
	rotateX : function(angle){
		var sin = Math.sin(angle),
			cos = Math.cos(angle),
			nextY = this.nextY * cos - this.nextZ * sin,
			nextZ = this.nextZ * cos + this.nextY * sin,
			y = this.y * cos - this.z * sin,
			z = this.z * cos + this.y * sin;

		this.nextY = nextY;
		this.nextZ = nextZ;
		this.y = y;
		this.z = z;
	},
	rotateY : function(angle){
		var sin = Math.sin(angle),
			cos = Math.cos(angle),
			nextX = this.nextX * cos - this.nextZ * sin,
			nextZ = this.nextZ * cos + this.nextX * sin,
			x = this.x * cos - this.z * sin,
			z = this.z * cos + this.x * sin;

		this.nextX = nextX;
		this.nextZ = nextZ;
		this.x = x;
		this.z = z;
	},
	rotateZ : function(angle){
		var sin = Math.sin(angle),
			cos = Math.cos(angle),
			nextX = this.nextX * cos - this.nextY * sin,
			nextY = this.nextY * cos + this.nextX * sin,
			x = this.x * cos - this.y * sin,
			y = this.y * cos + this.x * sin;

		this.nextX = nextX;
		this.nextY = nextY;
		this.x = x;
		this.y = y;
	},
	getAxis3D : function(){
		this.vx += (this.nextX - this.x) * this.SPRING;
		this.vy += (this.nextY - this.y) * this.SPRING;
		this.vz += (this.nextZ - this.z) * this.SPRING;

		this.vx *= this.FRICTION;
		this.vy *= this.FRICTION;
		this.vz *= this.FRICTION;

		this.x += this.vx;
		this.y += this.vy;
		this.z += this.vz;

		return {x : this.x, y : this.y, z : this.z};
	},
	getAxis2D : function(theta){
		var axis = this.getAxis3D(),
			scale = this.FOCUS_POSITION / (this.FOCUS_POSITION + axis.z);

		return {x : this.center.x + axis.x * scale, y : this.center.y - axis.y * scale, color : this.COLOR.replace('%hue', this.hue + theta)};
	}
};
$(function(){
	RENDERER.init(STRATEGY);
});
</script>

………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………
3、页首Html代码

<div id="jsi-particle-container" class="container"></div>

………………………………………………………………………………………………………………………………………………………………………………………………………………………………………………

4、页脚Html代码

<div class="box">
  <div class="loader">
    <div class="o"></div>
    <div class="o"></div>
    <div class="o"></div>
    <div class="o"></div>
  </div>
</div>
